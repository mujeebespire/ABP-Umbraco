@inherits UmbracoViewPage<BlockListItem>
@using Umbraco.Cms.Core.Models.Blocks
@using Umbraco.Cms.Core.Models
@using Umbraco.Extensions
@using Clean.Core.Extensions
@using ABP.Web.Models.UmbracoModels

@{
    var multi = Model.Content as MultiTabSection;
    var title = multi?.Title;
    var description = multi?.Description;
    var backgroundImage = multi?.BackgroundImage;
    var tabsBlockList = multi?.TabBlocks;
}

@{
    var bgUrl = multi?.BackgroundImage?.MediaUrl();
}
<div class="our-port-network" style="@(bgUrl != null ? $"background-image: url('{bgUrl}');" : "")">

        <h2 class="text-center h1">@title</h2>


    @if (!string.IsNullOrWhiteSpace(description))
    {
        <div class="text-center">@Html.Raw(description)</div>
    }

    <!-- Navigation Pills -->
    <ul class="nav port-nav-pills mt-5">
        @if (tabsBlockList != null)
        {
            var first = true;
            foreach (var tb in tabsBlockList)
            {
                var tab = tb?.Content as Tabs;
                if (tab == null) continue;

                var filterKey = (tab.TabTitle ?? "").ToLowerInvariant().Replace(" ", "-");
                <li class="pills-item">
                    <a class="pills-nav-link @(first ? "active" : "")" href="#" data-filter="@filterKey">
                        @tab.TabTitle
                    </a>
                </li>
                first = false;
            }
        }
    </ul>

    <!-- Cards -->
    <div class="ports-container">
        <div class="row g-4">
            @if (tabsBlockList != null)
            {
                var firstTab = true;
                foreach (var tb in tabsBlockList)
                {
                    var tab = tb?.Content as Tabs;
                    if (tab?.TabFeilds == null) continue;

                    var tabFilter = (tab.TabTitle ?? "").ToLowerInvariant().Replace(" ", "-");

                    foreach (var fe in tab.TabFeilds)
                    {
                        var field = fe?.Content as Feilds;
                        if (field == null) continue;

                        var categories = new List<string>();
                        if (field.TabFeildBlocks != null)
                        {
                            foreach (var cb in field.TabFeildBlocks)
                            {
                                var cbsec = cb?.Content as TabFeildBlockSection;
                                var raw = cbsec?.Tabs ?? "";
                                if (!string.IsNullOrWhiteSpace(raw))
                                {
                                    var parts = raw.Split(new char[] { ',', ';', '/' }, StringSplitOptions.RemoveEmptyEntries);
                                    foreach (var p in parts)
                                    {
                                        var k = p.Trim().ToLowerInvariant().Replace(" ", "-");
                                        if (!string.IsNullOrWhiteSpace(k) && !categories.Contains(k))
                                        {
                                            categories.Add(k);
                                        }
                                    }
                                }
                            }
                        }

                        var dataCats = string.Join(" ", categories);

                        <div class="col-lg-3 col-md-6 port-card-wrapper" data-tab="@tabFilter" style="@(firstTab ? "" : "display:none;")" data-categories="@dataCats">
                            <div class="port-card">
                                <div class="port-header">
                                    <div class="port-icon">
                                        <svg width="40" height="41" viewBox="0 0 40 41" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M20 8.40006C20.8841 8.40006 21.7319 8.04888 22.357 7.42375C22.9821 6.79863 23.3333 5.95079 23.3333 5.06673C23.3333 4.18268 22.9821 3.33483 22.357 2.70971C21.7319 2.08459 20.8841 1.7334 20 1.7334C19.1159 1.7334 18.2681 2.08459 17.643 2.70971C17.0179 3.33483 16.6667 4.18268 16.6667 5.06673C16.6667 5.95079 17.0179 6.79863 17.643 7.42375C18.2681 8.04888 19.1159 8.40006 20 8.40006ZM20 8.40006V40.0667M11.6667 25.9001C8.33333 25.9001 5.83333 24.2334 3.33333 20.9001H2.5C2.5 28.7001 7.6 35.3051 14.65 37.5667C16.6667 38.2334 18.3333 38.4001 19.7917 40.0667H20.2083C21.6667 38.4001 23.3333 38.2334 25.3517 37.5667C32.3983 35.3051 37.5 28.7001 37.5 20.9001H36.6667C34.1667 24.2334 31.6667 25.9001 28.3333 25.9001M11.6667 13.4001C11.6667 13.4001 15.8333 15.0667 20 15.0667C24.1667 15.0667 28.3333 13.4001 28.3333 13.4001" stroke="#2FDBD5" />
                                        </svg>
                                    </div>
                                    <h3 class="port-title">@field.Title</h3>
                                </div>

                                @if (!string.IsNullOrWhiteSpace(field.SubTitle))
                                {
                                    <p>@field.SubTitle</p>
                                }

                                <div class="port-tags">
                                    @if (categories.Any())
                                    {
                                        foreach (var c in categories)
                                        {
                                            var label = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(c.Replace("-", " "));
                                            <span class="port-tag">@label</span>
                                        }
                                    }
                                </div>

                                <div class="port-description mt-3">
                                    @Html.Raw(field.Description)
                                </div>
                            </div>
                        </div>
                    }
                    firstTab = false;
                }
            }
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const pills = document.querySelectorAll('.pills-nav-link');
        const cards = document.querySelectorAll('.port-card-wrapper');

        function setActive(el) {
            pills.forEach(p => p.classList.remove('active'));
            el.classList.add('active');
        }

        function filter(tag) {
            cards.forEach(card => {
                card.style.display = card.getAttribute('data-tab') === tag ? '' : 'none';
            });
        }

        // Show first tab by default
        if (pills.length) {
            setActive(pills[0]);
            filter(pills[0].getAttribute('data-filter'));
        }

        pills.forEach(p => {
            p.addEventListener('click', function (e) {
                e.preventDefault();
                const t = this.getAttribute('data-filter');
                setActive(this);
                filter(t);
            });
        });
    });
</script>
